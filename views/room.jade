extends layout

block content
    div.room
        h1.title
            a(href="/")= title

        form.sign-in#sign-in
            p Enter a username
            input#username(placeholder="Username")
            button#join(type="submit") Join
        div.play#play
            button#play-261.play-note play C
            button#play-293.play-note play D
            button#play-330.play-note play E
            button#play-350.play-note play F
            button#play-392.play-note play G
            button#play-440.play-note play A
            button#play-493.play-note play B
            button#play-523.play-note play C
        div
            ul#user-list

block js
    script(src="/socket.io/socket.io.js")
    script(src="/bower_components/timbre/index.js")
    script(src="/javascripts/instruments.js")
    script.
        var roomId = '#{roomId}'
        var socket = io();

        var joinRoom = document.getElementById('join');
        joinRoom.onclick = function(){
            var username = document.getElementById('username').value;
            if(roomId && username){
                socket.emit('joinroom', username, roomId);
            }
            else{
                alert('Please enter a username');
            }

            return false;
        };

        socket.on('joinedroom', function(result){
            if(result){
                document.getElementById('sign-in').style.display = 'none';
                document.getElementById('play').style.display = 'block';
            }
            else{
                alert('Sorry, that username is taken');
            }
        });

        function resetUserColor(node){
            setTimeout(function(){
                console.log('here');
                node.style.background = '#ffffff';
                node.style.color = '#000000';
            }, 200);
        }

        function lightUpUser(user){
            //show which user played the note
            var userList = document.getElementById('user-list');
            var childNodes = Array.prototype.slice.call(userList.childNodes);
            for(var i=0; i<childNodes.length; i++){
                if(childNodes[i].innerHTML === user){
                    childNodes[i].style.background = '#000000';
                    childNodes[i].style.color = '#ffffff';
                    resetUserColor(childNodes[i]);
                }
            }
        }

        function sendData(instrument, pitch){
            socket.emit('sendnote', instrument, pitch);
            lightUpUser(socket.username);
        }

        socket.on('recievedata', function(user, instrument, pitch){
            instruments[instrument](pitch);
            lightUpUser(user);
        });

        socket.on('userchange', function(users){
            var userList = document.getElementById('user-list');
            while(userList.firstChild){
                userList.removeChild(userList.firstChild);
            }
            for(var i=0; i<users.length; i++){
                var li = document.createElement("li");
                li.appendChild(document.createTextNode(users[i]));
                userList.appendChild(li);
            }
        });

    script.
        var messages = document.getElementById('messages');
        var message = document.getElementById('message-input');
        var playButtons = document.getElementsByClassName('play-note');
        playButtons = Array.prototype.slice.call(playButtons);

        playButtons.map(function(button, idx){
            playButtons[idx].onmousedown = function(){
                var instrument = 'violin';
                var id = button.id;
                var note = id.split('-')[1];
                sendData(instrument, note*2);
            };
        });

        var keymap = {
            49: '261',
            50: '293',
            51: '330',
            52: '350',
            53: '392',
            54: '440',
            55: '494',
            56: '523'
        };

        document.onkeydown = function(e) {
            var key = e.keyCode ? e.keyCode : e.which;
            if(keymap[key]){
                sendData('edm', keymap[key]);
            }
        };

